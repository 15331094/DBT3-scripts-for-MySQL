#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003-2006 Jenny Zhang & Open Source Development Labs, Inc.
# Copyright (c) 2008 Ingres Corp.

DBSCRIPTDIR=`pwd`
SRCDIR=${DBSCRIPTDIR}/..

source ordered_sets
source ../dbt3_profile || exit 1

TIMEOUT=0
WRAPPER=0
# process the command line parameters
while [ $# -ne 0 ]
do
    case $1 in
    -cnf)   shift;
            CNF=$1
        ;;
    -s)    shift;
           scale_factor=$1
        ;;
    -t)    shift;
           perf_run_number=$1
        ;;
    -o)    shift;
           OUTPUT_DIR=$1
        ;;
    -rd)   shift;
           RUNDIR=$1
        ;;
    -seed) shift;
           SEED_FILE=$1
        ;;
    -d)    shift;
           SID=$1
        ;;
    -n)    shift;
           STREAM_NUMBER=$1
        ;;
    -p)    shift;
           PLANS=$1
        ;;
    -q)    shift;
           QUERIES=$1
        ;;
    -qno)  shift;
           N_OPTMZ=$1
        ;;
    -qnr)  shift;
           N_RUN=$1
        ;;
    -qrst) shift;
           RESTART=$1
        ;;
    -pre)  shift;
           if [ "$1" = "0" ]; then
               prefix_file=`mktemp`
               touch $prefix_file
           else
               prefix_file=$1
           fi
        ;;
    -pos)  shift;
           if [ "$1" = "0" ]; then
               postfix_file=`mktemp`
               touch $postfix_file
           else
               postfix_file=$1
           fi
        ;;
    -time) shift;
	   TIMEOUT=$1
		;;
    -wrap) shift;	   
	   WRAPPER=$1
		;;        
    *)     echo "Usage: -cnf CNF -s SCALE_FACTOR -t TAG -o OUTPUT_DIR -rd RUNDIR -seed SEED_FILE -d SID -q QUERIES -qno QUERIES_N_OPTMZ -qnr QUERIES_N_RUN -qrst QUERIES_RESTART -pre PREFIX_FILE -pos POSTFIX_FILE -p QEP(0/1) -n STREAM_NUMBER"
           exit 1
            ;;
    esac
    shift
done

if [ -z ${CNF} ]; then
   er "CNF file is required."
fi

if [ -z "${scale_factor}" ]; then
        echo "-s is required"
fi

if [ -z "${perf_run_number}" ]; then
        echo "-t is required"
fi

if [ -z "${OUTPUT_DIR}" ]; then
        echo "-o is required"
fi

if [ -z "${RUNDIR}" ]; then
        echo "-rd is required"
fi

if [ -z "${SEED_FILE}" ]; then
        echo "-seed is required"
fi

if [ -z "${SID}" ]; then
        echo "-d is required"
fi

MYSQL_SOCK=`socket $CNF`

# replace comma(s) with space(s)
QUERIES=`echo ${QUERIES} | sed 's/,/ /g'`

param_file="$RUNDIR/throughput_param$STREAM_NUMBER"

# output PID to a tmp file
echo "$$" > $RUNDIR/PID$STREAM_NUMBER

SEED=`cat ${SEED_FILE}`
let "SEED = $SEED + $STREAM_NUMBER"

if [ "${QUERIES}" = "NO" ]; then
	# Get the (stream_number)th Throughput Test ordered set

        # indirect reference
        QUERIES=queries${STREAM_NUMBER}
	eval QUERIES=\$$QUERIES
fi

j=1
# prepare batches
for q in ${QUERIES}
do
        echo $'#!/bin/bash' >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
        echo $'# Script generated by the throughput test script' >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
        echo "source ${SRCDIR}/dbt3_profile || exit 1" >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}

        for ((i=1; i <= N_OPTMZ ; i++))
        do
                echo $'echo "select \x27\x27 as \x27-- Query Plan #'${i} $'--\x27\g" | mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
                echo $'echo "insert into time_statistics (tag, task_name, s_time, run_optimize, run_id, stream) values (\x27'${perf_run_number}$'\x27,\x27PERF.POWER.Q'${q}$'\x27,`$GTIME`,\x27O\x27,'${i}$','${STREAM_NUMBER}$')\g COMMIT\g" | mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
                echo $'${QGEN} -p '${STREAM_NUMBER} $'-r '${SEED} $'-s '${scale_factor} $'-l' ${param_file} ${j} $'| sed \x27s/^select/EXPLAIN EXTENDED select/\x27 | mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
                echo $'echo "update time_statistics set e_time=`$GTIME` where tag=\x27'${perf_run_number}$'\x27 and task_name=\x27PERF.POWER.Q'${q}$'\x27 and run_optimize=\x27O\x27 and run_id='${i}$' and stream='${STREAM_NUMBER}$'\g COMMIT\g" | mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
        done

        for ((i=1; i <= N_RUN ; i++))
        do
                echo $'echo "select \x27\x27 as \x27-- Run #'${i} $'--\x27\g" | mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
                echo $'echo "insert into time_statistics (tag, task_name, s_time, run_optimize, run_id, stream) values (\x27'${perf_run_number}$'\x27,\x27PERF.POWER.Q'${q}$'\x27,`$GTIME`,\x27R\x27,'${i}$','${STREAM_NUMBER}$')\g COMMIT\g" | mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
                echo $'${QGEN} -p '${STREAM_NUMBER} $'-r '${SEED} $'-s '${scale_factor} $'-l' ${param_file} ${j} $'| mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
		echo $'echo $DSS_QUERY' >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
                echo $'echo "update time_statistics set e_time=`$GTIME` where tag=\x27'${perf_run_number}$'\x27 and task_name=\x27PERF.POWER.Q'${q}$'\x27 and run_optimize=\x27R\x27 and run_id='${i}$' and stream='${STREAM_NUMBER}$'\g COMMIT\g" | mysql -S '${MYSQL_SOCK} ${SID} >> ${RUNDIR}/query_file${q}_${STREAM_NUMBER}

        done
        chmod +x ${RUNDIR}/query_file${q}_${STREAM_NUMBER}
	let "j=$j+1"
done

echo ">>> Throughput Test - Starting Stream ${STREAM_NUMBER} <<<"

# run batches
for q in ${QUERIES}
do
        echo "Stream ${STREAM_NUMBER} - Executing batch for Query Q${q}"
		if [ ${WRAPPER} -eq 1 ]; then
			echo "***stream ${STREAM_NUMBER} query ${q} started"
		fi
                
        ${RUNDIR}/query_file${q}_${STREAM_NUMBER} >> $OUTPUT_DIR/results/power_query${q}_${STREAM_NUMBER}.result || er "***stream ${STREAM_NUMBER} query ${q} failed"
        
    	duration=$(echo "select e_time-s_time duration from time_statistics where task_name='PERF.POWER.Q${q}' and tag=${perf_run_number} and run_optimize='R' and stream=${STREAM_NUMBER};" | mysql ${SID} -S ${MYSQL_SOCK} | sed 1d)
    	if [ -z "${duration}" ]; then
			echo "***stream ${STREAM_NUMBER} query ${q} failed"
		else			
			if [ ${WRAPPER} -eq 1 ]; then
				echo "***stream ${STREAM_NUMBER} query ${q} finished ${duration} sec"
			fi
		fi
	        
        if [ ${RESTART} -eq 1 ]; then
                echo "Restarting DBMS"
                ./stop_db.sh ${CNF} >> $OUTPUT_DIR/results/power_query${q}_${STREAM_NUMBER}.result 2>&1 || er "could not stop db after query ${q}"
                sleep 4s
                ./start_db.sh ${CNF} >> $OUTPUT_DIR/results/power_query${q}_${STREAM_NUMBER}.result 2>&1 || er "could not start db after query ${q}"
        fi
done

exit 0

